<%- include("settings/header") %>
<%- include("settings/nav") %>
<%- include("settings/top") %>

<style>
#chat-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
}
#messages {
  flex: 1;
  overflow-y: scroll;
  padding: 10px;
  width: 100%;
  box-sizing: border-box;
  background: #fafafa;
}
.message-bubble {
  background-color: #fff;
  padding: 10px;
  margin: 5px 0;
  border-radius: 8px;
  width: fit-content;
  border: 1px solid #000;
  max-width: 90%;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}
.message-item {
  margin-bottom: 15px;
}
.meta {
  font-size: 0.75em;
  color: #aaa;
  margin-bottom: 5px;
}
.delete-btn {
  font-size: 0.7em;
  color: red;
  background: none;
  border: none;
  cursor: pointer;
  margin-top: 5px;
}
.text {
  word-break: break-word;
  font-size: 1em;
}
.send {
  display: flex;
}
#input {
  flex: 1;
  padding: 10px;
  font-size: 1em;
  width: 1000px;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin-right: 10px;
}
#sendButton {
  padding: 15px 20px !important;
  font-size: 30px !important;
  width: 105px;
  height: 70px;
}
</style>

<div id="chat-container">
<div id="messages"></div>
  <h2><textarea class="chatText" id="input" maxlength="100" autocomplete="off" placeholder="最大100文字"></textarea></h2>
  <div class="send">
    <button class="blueButton30" id="sendButton" onclick="if (input) { sendChat() }">送信</button>
    <p style="font-size: 20px; font-weight: bold; padding-left: 10px;">
      Enterで改行、Shift+Enterで送信
    </p>
  </div>
<br>
</div>
</div> <!-- headerにある<div class="main"> を閉じているので正常です -->

<script src="/socket.io/socket.io.js"></script>
<script>
  const input = document.getElementById('input');
  const messages = document.getElementById('messages');
  
  input.addEventListener("keydown", function(e) {
    if (e.key === "Enter") {
      if (e.shiftKey) {
        e.preventDefault();
        sendChat();
      }
    }
  });

  function getCookie(name) {
    const cookies = document.cookie.split(';').map(c => c.trim());
    for (const cookie of cookies) {
      if (cookie.startsWith(name + '=')) {
        return decodeURIComponent(cookie.substring(name.length + 1));
      }
    }
    return null;
  }

  const isAdmin = getCookie('isAdmin') === "true";
  const username = getCookie("user");
  const socket = io({
    auth: { username: username || 'username error' }
  });

  if (isAdmin) {
    const adminDiv = document.getElementById("admin");
    if (adminDiv) adminDiv.style.display = "flex";
  }

  const input = document.getElementById('input');
  const messages = document.getElementById('messages');

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  function appendMessage(msg) {
    if (!msg || !msg.username || !msg.message || !msg.timestamp) return;
    const item = document.createElement('div');
    item.classList.add('message-item');

    item.innerHTML = `
      <div class="meta">
        <strong>${escapeHtml(msg.username)}</strong> [${escapeHtml(msg.timestamp)}]
      </div>
      <div class="text">${escapeHtml(msg.message)}</div>
      ${(msg.username === username || isAdmin) ? `<button class="delete-btn" data-id="${msg.id}">削除</button>` : ''}
    `;

    messages.appendChild(item);
    messages.scrollTop = messages.scrollHeight;
  }

  socket.on('chat history', (history) => {
    messages.innerHTML = '';
    history.forEach(msg => {
      if (msg && msg.username && msg.message && msg.timestamp) {
        appendMessage(msg);
      }
    });
  });

  socket.on('chat update', (msg) => {
    appendMessage(msg);
  });

  function sendChat() {
    const message = input.value.trim();
    if (message.length > 100) {
      alert("メッセージは100文字以内で入力してください。");
      return;
    }
    if (message) {
      socket.emit('chat message', message);
      input.value = '';
    }
  }

  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('delete-btn')) {
      const id = e.target.getAttribute('data-id');
      const confirmed = confirm("本当にこのメッセージを削除しますか？");
      if (confirmed) {
        socket.emit('delete message', id, username);
      }
    }
  });

  socket.on('delete message', (id) => {
    const allMessages = document.querySelectorAll('.message-item');
    allMessages.forEach(item => {
      const button = item.querySelector('.delete-btn');
      if (button && button.getAttribute('data-id') === id) {
        item.remove();
      }
    });
  });

  socket.on('system message', (text) => {
    const item = document.createElement('div');
    item.classList.add('message-item');
    item.style.color = '#888';
    item.style.fontStyle = 'italic';
    item.textContent = `[システム] ${text}`;
    messages.appendChild(item);
    messages.scrollTop = messages.scrollHeight;
  });
</script>
<script src="/chat.js"></script>

<%- include("settings/footer") %>