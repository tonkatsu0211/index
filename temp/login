// --- 既存の io.on('connection') をすべて削除し、以下に置き換えてください ---
io.on("connection", (socket) => {
  const username = socket.handshake.auth.username;
  socket.data.username = username;
  socket.data.isAdmin = adminUsers.has(username);

  // --- オンラインユーザーに追加 ---
  users[socket.id] = username;

  // オンライン人数とユーザー一覧を送信
  io.emit("user count", Object.keys(users).length);
  io.emit("user list", Object.values(users));

  // チャット履歴送信
  socket.emit('chat history', chatHistory);

  // メッセージ送信
  socket.on('chat message', (msg) => {
    if (msg.trim() === '/delete' && socket.data.isAdmin) {
      chatHistory = [];
      io.emit('chat history', chatHistory);
      return;
    }

    if (msg.startsWith('/admin ')) {
      const targetUser = msg.slice(7).trim();
      if (socket.data.isAdmin) {
        adminUsers.add(targetUser);
        io.emit('system message', `${targetUser} さんに管理者権限が付与されました`);
      } else {
        socket.emit('system message', `あなたには管理者権限がありません`);
      }
      return;
    }

    const messageData = {
      id: uuidv4(),
      username: socket.data.username,
      message: msg,
      timestamp: new Intl.DateTimeFormat('ja-JP', {
        timeZone: 'Asia/Tokyo',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      }).format(new Date())
    };

    chatHistory.push(messageData);
    if (chatHistory.length > 100) chatHistory.shift();

    fs.writeFile(path.join(__dirname, "chatHistory.json"), JSON.stringify(chatHistory, null, 2), (err) => {
      if (err) console.error("cannot saved chatHistory");
    });

    io.emit('chat update', messageData);
  });

  // メッセージ削除
  socket.on('delete message', (id) => {
    const index = chatHistory.findIndex(msg => msg.id === id);
    if (index !== -1) {
      const message = chatHistory[index];
      if (message.username === socket.data.username || socket.data.isAdmin) {
        chatHistory.splice(index, 1);
        io.emit('chat history', chatHistory);
      }
    }
  });

  // 切断時の処理
  socket.on("disconnect", () => {
    delete users[socket.id];
    io.emit("user count", Object.keys(users).length);
    io.emit("user list", Object.values(users));
  });
});
